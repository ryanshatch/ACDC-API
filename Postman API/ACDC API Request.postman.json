{
	"info": {
		"_postman_id": "3f3e34ce-2006-4dcb-a84f-1bdb8f69a410",
		"name": "ACDC API Request",
		"description": "A request to check an inmate in the ACDC API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39469155"
	},
	"item": [
		{
			"name": "Check Inmate",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Prepare the request body dynamically\r",
							"pm.variables.set(\"requestBody\", JSON.stringify({\r",
							"    inmates: [\r",
							"        { firstName: \"Foster\", lastName: \"Fech\" }\r",
							"    ]\r",
							"}));\r",
							"\r",
							"// Optional: Log the request body for debugging\r",
							"console.log(\"Request Body:\", pm.variables.get(\"requestBody\"));\r",
							"\r",
							"// // Prepare the request body dynamically\r",
							"// pm.variables.set(\"requestBody\", JSON.stringify({\r",
							"//     inmates: [\r",
							"//         { firstName: \"Foster\", lastName: \"Fech\" }\r",
							"//     ]\r",
							"// }));\r",
							"\r",
							"// // Optional: Log the request body for debugging\r",
							"// console.log(\"Request Body:\", pm.variables.get(\"requestBody\"));\r",
							"\r",
							"// // Ensure the status code is 200\r",
							"// pm.test(\"Status Code is 200\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"\r",
							"// // Check if the response contains the `found_inmates` property\r",
							"// pm.test(\"Response has found_inmates data\", function () {\r",
							"//     const responseData = pm.response.json();\r",
							"//     pm.expect(responseData).to.have.property(\"found_inmates\");\r",
							"//     pm.expect(responseData.found_inmates).to.be.an(\"array\");\r",
							"// });\r",
							"\r",
							"// // Optional: Validate the first inmate's details\r",
							"// pm.test(\"First inmate has correct details\", function () {\r",
							"//     const responseData = pm.response.json();\r",
							"//     const firstInmate = responseData.found_inmates[0];\r",
							"//     pm.expect(firstInmate).to.have.property(\"firstName\", \"Foster\");\r",
							"//     pm.expect(firstInmate).to.have.property(\"lastName\", \"Fech\");\r",
							"// });\r",
							"\r",
							"// pm.variables.set(\"requestBody\", JSON.stringify({\r",
							"//     inmates: [\r",
							"//         { firstName: \"Foster\", lastName: \"Fech\" }\r",
							"//     ]\r",
							"// }));\r",
							"\r",
							"// // Optional: Log to Postman Console for debugging\r",
							"// console.log(\"Request Body:\", pm.variables.get(\"requestBody\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Ensure the response status is 200\r",
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check if the response contains the `found_inmates` property\r",
							"pm.test(\"Response has found_inmates data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.property(\"found_inmates\");\r",
							"    pm.expect(responseData.found_inmates).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Validate the first inmate's details\r",
							"pm.test(\"First inmate has correct details\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const firstInmate = responseData.found_inmates[0];\r",
							"    pm.expect(firstInmate).to.have.property(\"firstName\", \"Foster\");\r",
							"    pm.expect(firstInmate).to.have.property(\"lastName\", \"Fech\");\r",
							"});\r",
							"\r",
							"// Log the response to the Postman Console for debugging\r",
							"console.log(\"Response Data:\", pm.response.json());\r",
							"\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>First Name</th>\r",
							"        <th>Last Name</th>\r",
							"    </tr>\r",
							"    \r",
							"    {{#each response.found_inmates}}\r",
							"        <tr id=row_{{@key}}>\r",
							"            <td>{{firstName}}</td>\r",
							"            <td>{{lastName}}</td>\r",
							"        </tr>\r",
							"    {{/each}}\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()};\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followAuthorizationHeader": true,
				"protocolVersion": "auto"
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{requestBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://acdc-api.onrender.com/check-inmate",
					"protocol": "https",
					"host": [
						"acdc-api",
						"onrender",
						"com"
					],
					"path": [
						"check-inmate"
					]
				},
				"description": "The `POST` request is used to check for an inmate via the specified endpoint `https://acdc-api.onrender.com/check-inmate`. The request body should be in raw format.\n\n### Request Body\n\n- `{{requestBody}}` (raw) - The request body should contain the necessary parameters to check for the inmate.\n    \n\n### Response\n\nThe response will be in JSON format with a status code of 200. The response schema is as follows:\n\n``` json\n{\n    \"found_inmates\": [\n        {\n            \"firstName\": \"\",\n            \"lastName\": \"\"\n        }\n    ]\n}\n\n ```\n\nThis JSON schema represents the structure of the response where the `found_inmates` array contains objects with `firstName` and `lastName` properties. The actual values for `firstName` and `lastName` will be returned based on the inmate found in the system."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Prepare the request body dynamically\r",
					"pm.variables.set(\"requestBody\", JSON.stringify({\r",
					"    inmates: [\r",
					"        { firstName: \"Foster\", lastName: \"Fech\" }\r",
					"    ]\r",
					"}));\r",
					"\r",
					"// Optional: Log the request body for debugging\r",
					"console.log(\"Request Body:\", pm.variables.get(\"requestBody\"));\r",
					"\r",
					"// // Prepare the request body dynamically\r",
					"// pm.variables.set(\"requestBody\", JSON.stringify({\r",
					"//     inmates: [\r",
					"//         { firstName: \"Foster\", lastName: \"Fech\" }\r",
					"//     ]\r",
					"// }));\r",
					"\r",
					"// // Optional: Log the request body for debugging\r",
					"// console.log(\"Request Body:\", pm.variables.get(\"requestBody\"));\r",
					"\r",
					"// // Ensure the status code is 200\r",
					"// pm.test(\"Status Code is 200\", function () {\r",
					"//     pm.response.to.have.status(200);\r",
					"// });\r",
					"\r",
					"// // Check if the response contains the `found_inmates` property\r",
					"// pm.test(\"Response has found_inmates data\", function () {\r",
					"//     const responseData = pm.response.json();\r",
					"//     pm.expect(responseData).to.have.property(\"found_inmates\");\r",
					"//     pm.expect(responseData.found_inmates).to.be.an(\"array\");\r",
					"// });\r",
					"\r",
					"// // Optional: Validate the first inmate's details\r",
					"// pm.test(\"First inmate has correct details\", function () {\r",
					"//     const responseData = pm.response.json();\r",
					"//     const firstInmate = responseData.found_inmates[0];\r",
					"//     pm.expect(firstInmate).to.have.property(\"firstName\", \"Foster\");\r",
					"//     pm.expect(firstInmate).to.have.property(\"lastName\", \"Fech\");\r",
					"// });\r",
					"\r",
					"// pm.variables.set(\"requestBody\", JSON.stringify({\r",
					"//     inmates: [\r",
					"//         { firstName: \"Foster\", lastName: \"Fech\" }\r",
					"//     ]\r",
					"// }));\r",
					"\r",
					"// // Optional: Log to Postman Console for debugging\r",
					"// console.log(\"Request Body:\", pm.variables.get(\"requestBody\"));\r",
					"\r",
					"// pm.variables.set(\"requestBody\", JSON.stringify({\r",
					"//     inmates: [\r",
					"//         { firstName: \"Foster\", lastName: \"Fech\" }\r",
					"//     ]\r",
					"// }));\r",
					"\r",
					"// // Optional: Log to Postman Console for debugging\r",
					"// console.log(\"Request Body:\", pm.variables.get(\"requestBody\"));\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Ensure the response status is 200\r",
					"pm.test(\"Status Code is 200\", function () {\r",
					"    pm.response.to.have.status(200);\r",
					"});\r",
					"\r",
					"// Check if the response contains the `found_inmates` property\r",
					"pm.test(\"Response has found_inmates data\", function () {\r",
					"    const responseData = pm.response.json();\r",
					"    pm.expect(responseData).to.have.property(\"found_inmates\");\r",
					"    pm.expect(responseData.found_inmates).to.be.an(\"array\");\r",
					"});\r",
					"\r",
					"// Validate the first inmate's details\r",
					"pm.test(\"First inmate has correct details\", function () {\r",
					"    const responseData = pm.response.json();\r",
					"    const firstInmate = responseData.found_inmates[0];\r",
					"    pm.expect(firstInmate).to.have.property(\"firstName\", \"Foster\");\r",
					"    pm.expect(firstInmate).to.have.property(\"lastName\", \"Fech\");\r",
					"});\r",
					"\r",
					"// Log the response to the Postman Console for debugging\r",
					"console.log(\"Response Data:\", pm.response.json());\r",
					"\r",
					"// // Ensure the response status is 200\r",
					"// pm.test(\"Status Code is 200\", function () {\r",
					"//     pm.response.to.have.status(200);\r",
					"// });\r",
					"\r",
					"// // Check if the response contains the `found_inmates` property\r",
					"// pm.test(\"Response has found_inmates data\", function () {\r",
					"//     const responseData = pm.response.json();\r",
					"//     pm.expect(responseData).to.have.property(\"found_inmates\");\r",
					"//     pm.expect(responseData.found_inmates).to.be.an(\"array\");\r",
					"// });\r",
					"\r",
					"// // Validate the first inmate's details\r",
					"// pm.test(\"First inmate has correct details\", function () {\r",
					"//     const responseData = pm.response.json();\r",
					"//     const firstInmate = responseData.found_inmates[0];\r",
					"//     pm.expect(firstInmate).to.have.property(\"firstName\", \"Foster\");\r",
					"//     pm.expect(firstInmate).to.have.property(\"lastName\", \"Fech\");\r",
					"// });\r",
					"\r",
					"// // Ensure the response status is 200\r",
					"// pm.test(\"Status Code is 200\", function () {\r",
					"//     pm.response.to.have.status(200);\r",
					"// });\r",
					"\r",
					"// // Check if the response contains the `found_inmates` property\r",
					"// pm.test(\"Response has found_inmates data\", function () {\r",
					"//     const responseData = pm.response.json();\r",
					"//     pm.expect(responseData).to.have.property(\"found_inmates\");\r",
					"//     pm.expect(responseData.found_inmates).to.be.an(\"array\");\r",
					"// });\r",
					"\r",
					"// // Optional: Validate the first inmate's details\r",
					"// pm.test(\"First inmate has correct details\", function () {\r",
					"//     const responseData = pm.response.json();\r",
					"//     const firstInmate = responseData.found_inmates[0];\r",
					"//     pm.expect(firstInmate).to.have.property(\"firstName\", \"Foster\");\r",
					"//     pm.expect(firstInmate).to.have.property(\"lastName\", \"Fech\");\r",
					"// });\r",
					"\r",
					"// // Log the response to the Postman Console for debugging\r",
					"// console.log(\"Response Data:\", pm.response.json());\r",
					"\r",
					"// // Ensure the response status is 200\r",
					"// pm.test(\"Status Code is 200\", function () {\r",
					"//     pm.response.to.have.status(200);\r",
					"// });\r",
					"\r",
					"// // Validate response structure\r",
					"// pm.test(\"Response has inmates data\", function () {\r",
					"//     const responseData = pm.response.json();\r",
					"//     pm.expect(responseData).to.have.property(\"found_inmates\");\r",
					"// });\r",
					"\r",
					"// function constructVisualizerPayload() {\r",
					"//   return {response: pm.response.json()}\r",
					"// }\r",
					"\r",
					"// pm.visualizer.set(pm.response.json(), constructVisualizerPayload());\r",
					"\r",
					"\r",
					"// // Ensure the response status is 200\r",
					"// pm.test(\"Status Code is 200\", function () {\r",
					"//     pm.response.to.have.status(200);\r",
					"// });\r",
					"\r",
					"// // Validate response structure\r",
					"// pm.test(\"Response has inmates data\", function () {\r",
					"//     const responseData = pm.response.json();\r",
					"//     pm.expect(responseData).to.have.property(\"data_received\");\r",
					"//     pm.expect(responseData.data_received).to.have.property(\"inmates\");\r",
					"// });\r",
					"// var template = `\r",
					"// <style type=\"text/css\">\r",
					"//     .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
					"//     .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
					"//     .tftable tr {background-color:#ffffff;}\r",
					"//     .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
					"//     .tftable tr:hover {background-color:#e0ffff;}\r",
					"// </style>\r",
					"\r",
					"// <table class=\"tftable\" border=\"1\">\r",
					"//     <tr>\r",
					"//         <th>First Name</th>\r",
					"//         <th>Last Name</th>\r",
					"//     </tr>\r",
					"    \r",
					"//     {{#each response.found_inmates}}\r",
					"//         <tr id=row_{{@key}}>\r",
					"//             <td>{{firstName}}</td>\r",
					"//             <td>{{lastName}}</td>\r",
					"//         </tr>\r",
					"//     {{/each}}\r",
					"// </table>\r",
					"// `;\r",
					"\r",
					"// function constructVisualizerPayload() {\r",
					"//   return {response: pm.response.json()}\r",
					"// }\r",
					"\r",
					"// pm.visualizer.set(template, constructVisualizerPayload());"
				]
			}
		}
	]
}